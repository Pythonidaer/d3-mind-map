import { COLORS } from '../../../theme/colors';

export const nodes = [
  {
    id: 'root',
    label: 'Scalability',
    shape: 'roundRect',
    color: 'root',
    definition: 'Techniques and strategies to ensure an application can grow and maintain performance as complexity and load increase.',
  },
  {
    id: 'componentization',
    label: 'Componentization',
    shape: 'ellipse',
    color: 'nodePositive1',
    parent: 'root',
    definition: 'Breaking the UI into reusable, independent components to improve maintainability and scalability.',
  },
  {
    id: 'css_architecture',
    label: 'CSS Architecture',
    shape: 'ellipse',
    color: 'nodePositive1',
    parent: 'root',
    definition: 'Organizing and structuring CSS code using methodologies like ITCSS, CSS Modules, and BEM to scale styles effectively.',
  },
  {
    id: 'benefits',
    label: 'Benefits / Pros',
    shape: 'ellipse',
    color: 'nodePositive1',
    parent: 'root',
    definition: 'Advantages gained by applying scalability techniques.',
  },
  {
    id: 'cons',
    label: 'Cons',
    shape: 'hexagon',
    color: 'nodeNegative1',
    parent: 'root',
    definition: 'Common drawbacks or challenges associated with scalability approaches.',
  },
  {
    id: 'anti_patterns',
    label: 'Anti-Patterns',
    shape: 'hexagon',
    color: 'nodeNegative1',
    parent: 'root',
    definition: 'Common mistakes and patterns that hinder scalability.',
  },
  // Componentization children
  {
    id: 'repeated_elements',
    label: 'Repeated Elements',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'componentization',
    definition: 'UI elements like buttons, menus, and cards that are reused across the application.',
  },
  {
    id: 'sections',
    label: 'Sections of a Page',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'componentization',
    definition: 'Logical chunks such as headers, content areas, and footers extracted as components.',
  },
  {
    id: 'logical_chunks',
    label: 'Logical Chunks',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'componentization',
    definition: 'Self-contained functionality groups encapsulated into components for reuse.',
  },
  // CSS Architecture children
  {
    id: 'itcss',
    label: 'ITCSS',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'css_architecture',
    definition: 'Inverted Triangle CSS: a layered approach that organizes CSS from generic to specific.',
  },
  {
    id: 'ui_libraries',
    label: 'UI Libraries',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'css_architecture',
    definition: 'Pre-built component libraries that provide scalable, standardized styles.',
  },
  {
    id: 'css_modules',
    label: 'CSS Modules',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'css_architecture',
    definition: 'Locally scoped CSS by default to avoid naming collisions and improve maintainability.',
  },
  {
    id: 'bem',
    label: 'BEM',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'css_architecture',
    definition: 'Block Element Modifier methodology for naming CSS classes and structuring styles.',
  },
  // Benefits children
  {
    id: 'improved_reusability',
    label: 'Improved Reusability',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'benefits',
    definition: 'Components and structured CSS encourage reuse, reducing duplication.',
  },
  {
    id: 'maintainability',
    label: 'Maintainability',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'benefits',
    definition: 'Clear structure and isolated styles/components make updates easier.',
  },
  {
    id: 'performance',
    label: 'Performance',
    shape: 'rect',
    color: 'nodePositive2',
    parent: 'benefits',
    definition: 'Optimized component rendering and scoped styles can enhance performance at scale.',
  },
  // Cons children
  {
    id: 'initial_setup_overhead',
    label: 'Initial Setup Overhead',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'cons',
    definition: 'Establishing component libraries and CSS architectures requires initial time investment.',
  },
  {
    id: 'complexity',
    label: 'Increased Complexity',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'cons',
    definition: 'Too many components or layers in CSS can complicate the development process.',
  },
  {
    id: 'learning_curve',
    label: 'Learning Curve',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'cons',
    definition: 'Team needs to learn new patterns and tools, which can slow down early development.',
  },
  // Anti-Patterns children
  {
    id: 'monolithic_css',
    label: 'Monolithic CSS',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'anti_patterns',
    definition: 'Single large stylesheet that becomes unmanageable as the project grows.',
  },
  {
    id: 'deep_component_hierarchy',
    label: 'Deep Component Hierarchy',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'anti_patterns',
    definition: 'Excessive nesting of components leading to difficult-to-manage structures.',
  },
  {
    id: 'global_style_pollution',
    label: 'Global Style Pollution',
    shape: 'rect',
    color: 'nodeNegative2',
    parent: 'anti_patterns',
    definition: 'Overusing global CSS rules that unintentionally affect unrelated components.',
  },
];

export const links = [
  { source: 'root', target: 'componentization' },
  { source: 'root', target: 'css_architecture' },
  { source: 'root', target: 'benefits' },
  { source: 'root', target: 'cons' },
  { source: 'root', target: 'anti_patterns' },
  { source: 'componentization', target: 'repeated_elements' },
  { source: 'componentization', target: 'sections' },
  { source: 'componentization', target: 'logical_chunks' },
  { source: 'css_architecture', target: 'itcss' },
  { source: 'css_architecture', target: 'ui_libraries' },
  { source: 'css_architecture', target: 'css_modules' },
  { source: 'css_architecture', target: 'bem' },
  { source: 'benefits', target: 'improved_reusability' },
  { source: 'benefits', target: 'maintainability' },
  { source: 'benefits', target: 'performance' },
  { source: 'cons', target: 'initial_setup_overhead' },
  { source: 'cons', target: 'complexity' },
  { source: 'cons', target: 'learning_curve' },
  { source: 'anti_patterns', target: 'monolithic_css' },
  { source: 'anti_patterns', target: 'deep_component_hierarchy' },
  { source: 'anti_patterns', target: 'global_style_pollution' },
];